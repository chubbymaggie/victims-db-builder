import yaml
import sys
import library
import logging

class Vulnerability:

    ## For loading in Yaml info
    def __init__(self, cve, title, description,
                 cvss_v2, references, libraries, package_urls):
        self.logger = logging.getLogger(__name__)
        self.cve = cve
        self.title = title
        if description is not None:
            self.description = description
        if cvss_v2 is not None:
            self.cvss_v2 = cvss_v2
        if references is not None:
            references
        self.libraries = list()
        self._affected_libraries = libraries
        self.package_urls = package_urls
        #self.add_libraries(libraries)

    #TODO the types of Libraries we add will differ for Python and Ruby
    def add_libraries(self, affectedLibraries=None):
        if affectedLibraries is None:
            affectedLibraries = self._affected_libraries
        for affectedLibrary in affectedLibraries:
            version = affectedLibrary['version']
            artifactId = affectedLibrary['artifactId']
            groupId = affectedLibrary['groupId']
            lib = library.JavaLibrary(version, groupId, artifactId)
            for affectedlib in lib.affectedMvnSeries:
                self.libraries.append(affectedlib)

    ## Prints out basics
    def print_flaw(self):
        print("CVE= " + self.cve)
        for library in self.libraries:
            #TODO check for library type eg. JavaLibrary
            print("affected versions: %s" % library.affectedMvnSeries)
            print("groupId: %s" % library.groupId)
            print("artifactId: %s" % library.artifactId)
        rangeCount = 1

## Construct from YAML
def construct_yaml(document):
    try:
        data = yaml.load(open(document, 'r'))
        cve = data['cve']
        title = data['title']
        description = checkAndGet(data, 'description')
        cvss_v2 = checkAndGet(data, 'cvss_v2')
        references = checkAndGet(data, 'references')
        libraries = data['affected']
        package_urls = data.get('package_urls', None)
        return Vulnerability(cve, title, description, cvss_v2, references,
            libraries, package_urls)
    except IOError as e:
        print("Error loading YAML file: %s" % e)
        sys.exit(1)

def checkAndGet(data, attributeName):
    if hasattr(data, attributeName):
        return data[attributeName]
    else:
        return None
